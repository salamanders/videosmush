    /*


     */

             /**
         * Gray returns directly
         * BGR (bytes) or RGB (int) convert to hue (because shadows)
        */
        internal fun BufferedImage.toHue(): IntArray = if (type == BufferedImage.TYPE_BYTE_GRAY) {
            (raster.dataBuffer!! as DataBufferByte).data.asIterable().map { pixel ->
                pixel.toInt() and 0xFF
            }.toIntArray()
        } else {
            toDecodedImage().toHue()
        }

            fun toHue(): IntArray = IntArray(red.size) { index ->
                getHue(red[index], green[index], blue[index])
            }


        /**
         * Iterate over every pixel.  Good for extracting things, or summing frames into a buffer.
         */
        fun Frame.toDecodedImage(): DecodedImage {
            val red = IntArray(this.imageWidth * this.imageHeight)
            val green = IntArray(this.imageWidth * this.imageHeight)
            val blue = IntArray(this.imageWidth * this.imageHeight)
            val bgrIdx: UByteIndexer = createIndexer()
            FastRunner().use { fr ->
                for (rowNum in 0L until this.imageHeight) {
                    for (colNum in 0L until this.imageWidth) {
                        val idx = (colNum * imageWidth + rowNum).toInt()
                        fr.prun {
                            blue[idx] = bgrIdx.get(rowNum, colNum, 0)
                        }
                        fr.prun {
                            green[idx] = bgrIdx.get(rowNum, colNum, 1)
                        }
                        fr.prun {
                            red[idx] = bgrIdx.get(rowNum, colNum, 2)
                        }
                    }
                }
                bgrIdx.release()
            }
            return DecodedImage(
                width = imageWidth,
                height = imageHeight,
                red = red,
                green = green,
                blue = blue,
            )
        }


                /** from https://stackoverflow.com/questions/23090019/fastest-formula-to-get-hue-from-rgb/26233318 */
                private fun getHue(red: Int, green: Int, blue: Int): Int {
                    val min = minOf(red, green, blue)
                    val max = maxOf(red, green, blue)
                    if (min == max) {
                        return 0
                    }
                    var hue = when (max) {
                        red -> (green - blue).toDouble() / (max - min)
                        green -> 2 + (blue - red).toDouble() / (max - min)
                        else -> 4 + (red - green).toDouble() / (max - min)
                    }
                    hue *= 60
                    if (hue < 0) hue += 360
                    return hue.toInt()
                }

